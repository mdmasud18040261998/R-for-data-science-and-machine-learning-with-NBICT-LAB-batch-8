5+6
setwd("E:/R/github/R-for-data-science-and-machine-learning-with-NBICT-LAB-batch-8/RDSML-Day-14 ðŸ‘‰ Histogram in R (Part-2)")
# importing dataset
dataset = read.csv("dataset.csv")
setwd("E:/R/github/R-for-data-science-and-machine-learning-with-NBICT-LAB-batch-8/RDSML-Day-14 ðŸ‘‰ Histogram in R (Part-2)")
# importing dataset
dataset = read.csv("dataset.csv")
setwd("E:/R/github/R-for-data-science-and-machine-learning-with-NBICT-LAB-batch-8/RDSML-Day-14 ðŸ‘‰ Histogram in R (Part-2)")
# importing dataset
dataset = read.csv("dataset.csv")
# importing dataset
dataset = read.csv("dataset.csv")
# importing dataset
dataset = read.csv("dataset.csv")
setwd("E:/R/github/R-for-data-science-and-machine-learning-with-NBICT-LAB-batch-8/RDSML-Day-14 ðŸ‘‰ Histogram in R (Part-2)")
# importing dataset
dataset = read.csv("data.csv")
#importing the library
library(ggplot2)
# creating the basic histogram
ggplot(dataset, aes(x= weight)) +
geom_histogram(color = "white")
# changing histogram plot line by color by groups
ggplot(dataset, aes(x= weight, fill = sex)) +
geom_histogram(color = "white", alpha = 0.5, position = "identity")
# importing dataset
dataset = read.csv("data.csv")
#importing the library
library(ggplot2)
# creating the basic histogram
ggplot(dataset, aes(x= weight)) +
geom_histogram(color = "white")
# changing histogram plot line by color by groups
ggplot(dataset, aes(x= weight, fill = sex)) +
geom_histogram(color = "white", alpha = 0.5, position = "identity")
# we can change ht position adjustment
# to use for overlapping points on the layer
# possible values for the argument position are
# identity, stack, dodge, default value is stack
# interleaved histograms
ggplot(dataset, aes(x= weight, fill = sex)) +
geom_histogram(color = "white", alpha = 0.5, position = "identity") +
theme(legend.position = "top")
# the plyr package is used to calculate the mean weight of each group
install.packages("plyr")
library(plyr)
group_means = ddply(dataset, "sex", summerise, grp.mean = mean(weight))
install.packages("plyr")
library(plyr)
group_means = ddply(dataset, "sex", summerise, grp.mean = mean(weight))
group_means = ddply(dataset, "sex", summerise, grp.mean = mean(weight))
myPlot = ggplot(dataset, aes(x= weight, fill = sex)) +
geom_histogram(color = "white", alpha = 0.5, position = "identity") +
geom_vline(data = group_means, aes(xintercept = grp.mean))+
theme(legend.position = "top")
myPlot = ggplot(dataset, aes(x= weight, fill = sex)) +
geom_histogram(color = "white", alpha = 0.5, position = "identity") +
geom_vline(data = group_means, aes(xintercept = grp.mean))
myPlot
install.packages(plyr)
library(plyr)
#adding mean line
myPlot = ggplot(dataset, aes(x= weight, fill = sex)) +
geom_histogram(color = "white", alpha = 0.5, position = "identity") +
geom_vline(data = group_means, aes(xintercept = grp.mean)) +
theme(legend.position = "top")
# Importing the dataset
dataset = read.csv("data.csv")More actions
# Importing the dataset
dataset = read.csv("data.csv")
# Importing the library
library(ggplot2)
# Creating the basic histogram
ggplot(dataset, aes(x = weight)) +
geom_histogram(color = "white")
# Changing histogram plot line colors by groups
ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "identity")
# We can change the position adjustment
# to use for overlapping points on the layer.
# Possible values for the argument position are
# "identity", "stack", "dodge". Default value is "stack".
# Interleaved histograms
ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
theme(legend.position = "top")
# The plyr package is used to calculate
# the mean weight of each group.
# install.packages("plyr")
library(plyr)
group_means = ddply(dataset, "sex", summarise, grp.mean = mean(weight))
group_means
# Adding mean lines
myPlot = ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean, color = sex),
linetype = "dashed") +
theme(legend.position = "top")
myPlot
myPlot + scale_color_manual(values = c("red", "blue"))+
scale_fill_manual(values = c("green", "orange")
myPlot + scale_color_manual(values = c("red", "blue"))+
myPlot + scale_color_manual(values = c("red", "blue"))+
scale_fill_manual(values = c("green", "orange"))
myPlot + scale_color_manual(values = c("#999999", "#E69F00"))+
scale_fill_manual(values = c("#999999", "#E69F00"))
myPlot + scale_color_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")
# using a grey scale
myPlot + scale_color_grey() + scale_fill_grey()
# using a grey scale
myPlot + scale_color_grey() + scale_fill_grey() +
theme_classic()
